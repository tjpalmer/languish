{"version":3,"sources":["helpers.ts","parsedData.ts","context.tsx","components/Header.tsx","components/LangItem.tsx","components/LangList.tsx","components/Metric.tsx","components/Plot.tsx","components/App.tsx","index.tsx"],"names":["clx","args","filter","e","join","objectEntries","Object","entries","defaultWeights","freeze","issues","pulls","stars","soQuestions","keepFirst","keyed","assign","keys","map","key","keyOn","items","result","item","keyVal","list","push","parseWeights","texts","fromEntries","value","parsed","parseFloat","isNaN","putMean","sums","weights","weightTotal","sumOf","values","points","point","sum","mean","nums","reduce","x","y","tableToItems","table","rows","row","index","chooseColor","name","hash","murmur3","color","hue","saturation","filterDate","date","tables","dates","sort","colors","data","normalize","length","p","console","warn","fillDates","translations","defaultState","searchTerm","trimmed","metricsAreExpanded","metric","scale","langList","selectedLangs","Set","highlighted","undefined","numbers","toString","noopFuncs","updateSearchTerm","toggleTrimmed","toggleMetricsAreExpanded","emptyList","resetList","changeMetric","changeScale","changeWeight","toggleSelected","setHighlighted","GlobalContext","React","createContext","useGlobal","useContext","GlobalProvider","Component","constructor","props","super","state","this","setState","prevState","clear","wipeHash","i","add","constructList","processChangedWeights","has","delete","render","Provider","children","queueMicrotask","rememberHash","loadUrlParams","getRanks","offset","counts","stats","slice","a","b","currRank","rank","currentRanks","oldRanks","oldRanksMap","prev","curr","worstRank","Math","min","ele","diff","window","location","params","URLSearchParams","get","weightsText","names","split","size","lang","toLowerCase","setTimeout","history","replaceState","Header","global","showMessage","setShowMessage","useState","className","href","title","width","height","viewBox","fill","style","position","top","border","left","transform","aria-hidden","d","transformOrigin","onClick","preventDefault","append","customWeights","forEach","String","url","URL","textarea","document","createElement","textContent","body","appendChild","select","execCommand","removeChild","copyLink","customNames","raku","customTopics","LangItem","memo","onMouseOver","onMouseOut","selected","lowerCaseName","customName","customTopic","replace","soTag","stackoverflow","data-name","backgroundColor","target","encodeURIComponent","LangList","inputRef","useRef","langsToRender","useMemo","lowerCaseSearchTerm","includes","ref","onChange","Metric","label","info","real","display","event","renderWeight","linear","log","makeDataset","borderColor","cubicInterpolationMode","entry","hoverBorderColor","hoverBorderWidth","pointHoverBackgroundColor","pointBackgroundColor","Plot","canvasRef","chart","useLayoutEffect","current","context","getContext","Chart","datasets","labels","options","animation","duration","hover","animationDuration","mode","legend","maintainAspectRatio","responsive","scales","xAxes","ticks","callback","fontColor","yAxes","Number","toPrecision","suggestedMin","tooltips","bodyFontSize","callbacks","datasetIndex","toFixed","labelColor","titleFontSize","titleFontStyle","type","useEffect","available","update","borderWidth","App","Promise","resolve","then","catch","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.047ddc04.chunk.js","sourcesContent":["// joins its arguments with a space and ignores falsy ones\n// its a small utility for className\nexport function clx(\n  ...args: (string | false | 0 | null | undefined)[]\n): string {\n  return args.filter((e) => e).join(\" \");\n}\n\n// type-safe Object.entries\n// should be used only on objects you know the keys wont be polluted\n// https://github.com/microsoft/TypeScript/issues/21826#issuecomment-479851685\nexport const objectEntries = Object.entries as <T>(\n  o: T\n) => [Extract<keyof T, string>, T[keyof T]][];\n\nexport function trimTrailingFloat(x: number): string {\n  // Hack to prevent rounding error issues.\n  return Number.parseFloat(x.toPrecision(12)).toString();\n}\n","// 1:1 port of index.ts from the non-preact version\nimport tables from \"data.json\";\nimport { murmur3 } from \"murmurhash-js\";\n\nexport interface CoreMetrics {\n  issues: number;\n  pulls: number;\n  stars: number;\n  soQuestions: number;\n}\n\nexport const defaultWeights: CoreMetrics = Object.freeze({\n  issues: 1,\n  pulls: 0,\n  stars: 1,\n  soQuestions: 1,\n});\n\nexport type CoreMetricTexts = {\n  [key in keyof CoreMetrics]: string;\n};\n\nexport interface Metrics extends CoreMetrics {\n  mean: number;\n}\n\ninterface DateMetrics extends Metrics {\n  date: string;\n}\n\ninterface Entry extends DateMetrics {\n  name: string;\n}\n\nexport interface Translation {\n  key: string;\n  reddit: string;\n  stackoverflow: string;\n  wikipedia: string;\n}\n\ntype Keyed<Item> = {\n  [key: string]: Item;\n};\n\ninterface Data {\n  colors: { [name: string]: string };\n  dates: string[];\n  entries: Keyed<Entry[]>;\n  sums: Keyed<DateMetrics>;\n}\n\nexport type MeanParams = {\n  entries: Keyed<Entry[]>;\n  sums: Keyed<DateMetrics>;\n  weights: CoreMetrics;\n};\n\nfunction keepFirst<Item>(keyed: Keyed<Item[]>): Keyed<Item> {\n  return Object.assign(\n    {},\n    ...Object.keys(keyed).map((key) => {\n      return { [key]: keyed[key][0] };\n    })\n  );\n}\n\ninterface KeyOnArgs<Key extends keyof Item, Item> {\n  key: Key;\n  items: Item[];\n}\n\nfunction keyOn<Key extends keyof Item, Item>(\n  args: KeyOnArgs<Key, Item>\n): Keyed<Item[]> {\n  let { key, items } = args;\n  let result = {} as Keyed<Item[]>;\n  for (let item of items) {\n    let keyVal = item[key] as unknown as string;\n    let list = result[keyVal];\n    if (!list) {\n      result[keyVal] = list = [];\n    }\n    list.push(item);\n  }\n  return result;\n}\n\nfunction fillDates({ dates, entries }: Data) {\n  for (let [name, points] of Object.entries(entries)) {\n    if (points.length !== dates.length) {\n      // We have the extra points to fill in.\n      let result = [];\n      let p = 0;\n      for (let date of dates) {\n        let point: Entry = points[p];\n        if (!point || point.date > date) {\n          // Missing, so fill in zeros.\n          point = Object.assign(\n            {},\n            ...Object.entries(points[0]).map(([key, value]) => {\n              if (key === \"date\") {\n                return { date };\n              } else {\n                return { [key]: typeof value === \"number\" ? 0 : value };\n              }\n            })\n          );\n          point.date = date;\n        } else {\n          // Already have a point for this date.\n          if (point.date !== date) {\n            // No details, so these can coallesce in the console.\n            // I only had these show up under a bug before, but I'd like to\n            // leave this around just in case.\n            console.warn(\"unrepresented date\");\n          }\n          p += 1;\n        }\n        // Whether the old point or new, we have something to add in.\n        result.push(point);\n      }\n      // Replace the entries with the full list.\n      entries[name] = result;\n    }\n  }\n}\n\nfunction normalize({ entries, sums }: Data) {\n  let keys = Object.keys(Object.values(sums)[0]).filter(\n    (key) => key !== \"date\"\n  ) as (keyof Metrics)[];\n  for (let points of Object.values(entries)) {\n    for (let point of points) {\n      let sum = sums[point.date];\n      for (let key of keys) {\n        (point[key] as number) =\n          (100 * (point[key] as number)) / (sum[key] as number);\n      }\n    }\n  }\n}\n\nexport function parseWeights(texts: CoreMetricTexts): CoreMetrics {\n  return Object.fromEntries(\n    Object.entries(texts).map(([key, value]) => {\n      let parsed = parseFloat(value);\n      if (isNaN(parsed)) {\n        parsed = 0;\n      }\n      return [key, parsed];\n    })\n  ) as unknown as Metrics;\n}\n\nexport function putMean({ entries, sums, weights }: MeanParams) {\n  const keys = Object.keys(weights) as (keyof CoreMetrics)[];\n  const weightTotal = sumOf(Object.values(weights));\n  for (const points of Object.values(entries)) {\n    for (const point of points) {\n      // TODO Use sums param to unweight missing values?\n      const sum = sumOf(keys.map((key) => weights[key] * point[key]));\n      point.mean = sum / weightTotal;\n    }\n  }\n}\n\nexport function stringifyWeights(numbers: CoreMetrics): CoreMetricTexts {\n  return Object.fromEntries(\n    Object.entries(numbers).map(([key, value]) => [key, value.toString()])\n  ) as unknown as CoreMetricTexts;\n}\n\nfunction sumOf(nums: number[]): number {\n  return nums.reduce((x, y) => x + y, 0);\n}\n\ninterface Table<Key extends keyof Item, Item> {\n  keys: Key[];\n  rows: Item[Key][][];\n}\n\nfunction tableToItems<Item, Key extends keyof Item>(\n  table: Table<Key, Item>\n): Item[] {\n  let { keys, rows } = table;\n  let items = rows.map((row) =>\n    Object.assign(\n      {},\n      ...keys.map((key, index) => {\n        return { [key]: row[index] };\n      })\n    )\n  ) as Item[];\n  return items;\n}\n\nexport interface Color {\n  hue: number;\n  saturation: number;\n}\n\nfunction chooseColor(name: string) {\n  // Use a handpicked seed that looks nice enough for the current top 10.\n  let hash = murmur3(name, 95);\n  let hue = (360 * ((hash >> 16) & 0xffff)) / 0xffff;\n  let saturation = 100 * (0.3 + (0.7 * (hash & 0xffff)) / 0xffff);\n  return formatColor({ hue, saturation });\n}\n\nfunction filterDate<Metrics extends DateMetrics>(items: Metrics[]): Metrics[] {\n  // This hard codes to the quarter when our GitHub data starts.\n  // Stack Overflow data starts earlier, but I don't want to rely on that\n  // independently.\n  return items.filter((item) => item.date >= \"2012Q1\");\n}\n\nfunction formatColor(color: Color) {\n  return `hsl(${color.hue}, ${color.saturation}%, 70%)`;\n}\n\nlet sums = keepFirst(\n  keyOn({\n    key: \"date\",\n    items: filterDate(tableToItems(tables.sums as any) as DateMetrics[]),\n  })\n);\nlet dates = Object.keys(sums).sort();\nlet entries = keyOn({\n  key: \"name\",\n  items: filterDate(tableToItems(tables.items as any) as Entry[]),\n});\nlet colors = Object.assign(\n  {},\n  ...Object.keys(entries).map((name) => {\n    return { [name]: chooseColor(name) };\n  })\n) as { [name: string]: string };\nlet data = { colors, dates, entries, sums };\n// Normalize and mean in advance.\nnormalize(data);\nputMean({ entries: data.entries, sums: data.sums, weights: defaultWeights });\n// Fill in missing data here.\n// The idea is that this code is smaller than the compressed repeated zeros\n// would be in the preprocessed data -- and not too expensive to compute.\nfillDates(data);\n\nlet translations = keepFirst(\n  keyOn({\n    key: \"key\",\n    items: tableToItems(tables.translations as any) as Translation[],\n  })\n);\n\nexport { colors, dates, entries, sums, translations };\n","import { LangItemProps } from \"components/LangItem\";\nimport { objectEntries } from \"helpers\";\nimport {\n  colors,\n  CoreMetricTexts,\n  defaultWeights,\n  entries,\n  Metrics,\n  parseWeights,\n  putMean,\n  stringifyWeights,\n  sums,\n} from \"parsedData\";\nimport React, { useContext } from \"react\";\n\nexport type Scale = \"linear\" | \"log\";\n\nconst defaultState = {\n  searchTerm: \"\",\n  trimmed: false,\n  metricsAreExpanded: false,\n  metric: \"mean\" as keyof Metrics,\n  scale: \"linear\" as Scale,\n  langList: [] as Omit<\n    LangItemProps,\n    \"selected\" | \"onClick\" | \"onMouseOver\" | \"onMouseOut\"\n  >[],\n  selectedLangs: new Set<string>(),\n  highlighted: undefined as string | undefined,\n  weights: stringifyWeights(defaultWeights),\n};\n\n// react context isnt very type-friendly, need to declare noops\nconst noopFuncs = {\n  updateSearchTerm(searchTerm: string) {},\n  toggleTrimmed() {},\n  toggleMetricsAreExpanded() {},\n  emptyList() {},\n  resetList() {},\n  changeMetric(metric: keyof Metrics) {},\n  changeScale(scale: Scale) {},\n  changeWeight(key: keyof Metrics, value: string) {},\n  toggleSelected(name: string) {},\n  setHighlighted(name?: string) {},\n};\n\nexport const GlobalContext = React.createContext({\n  ...defaultState,\n  ...noopFuncs,\n});\n\nexport const useGlobal = () => useContext(GlobalContext);\n\nexport class GlobalProvider extends React.Component<{}, typeof defaultState> {\n  state = defaultState;\n\n  constructor(props: {}) {\n    super(props);\n\n    // queuing because setState is asynchronous and each call depends on the previous one\n    queueMicrotask(() => {\n      this.constructList();\n      queueMicrotask(() => {\n        rememberHash = true;\n        try {\n          this.resetList();\n        } finally {\n          rememberHash = false;\n        }\n        queueMicrotask(() => this.loadUrlParams());\n      });\n    });\n  }\n\n  updateSearchTerm = (searchTerm: string) =>\n    this.setState({\n      searchTerm,\n      trimmed: false,\n    });\n\n  toggleTrimmed = () =>\n    this.setState((prevState) => ({\n      searchTerm: \"\",\n      trimmed: !prevState.trimmed,\n    }));\n\n  toggleMetricsAreExpanded = () =>\n    this.setState((prevState) => ({\n      metricsAreExpanded: !prevState.metricsAreExpanded,\n    }));\n\n  emptyList = () => {\n    this.setState((prevState) => {\n      prevState.selectedLangs.clear();\n      return prevState;\n    });\n    wipeHash();\n  };\n\n  resetList = () => {\n    this.setState((prevState) => {\n      // mark top 10 as selected\n      prevState.selectedLangs.clear();\n\n      for (let i = 0; i < 10; i++) {\n        prevState.selectedLangs.add(this.state.langList[i].name);\n      }\n\n      return {\n        ...prevState,\n        searchTerm: \"\",\n      };\n    });\n    wipeHash();\n  };\n\n  changeMetric = (metric: keyof Metrics) => {\n    this.setState({ metric }, this.constructList);\n    wipeHash();\n  };\n\n  changeScale = (scale: Scale) => {\n    this.setState({ scale });\n    wipeHash();\n  };\n\n  changeWeight = (key: keyof Metrics, value: string) => {\n    this.setState(\n      { weights: { ...this.state.weights, [key]: value } },\n      this.processChangedWeights\n    );\n    wipeHash();\n  };\n\n  toggleSelected = (name: string) => {\n    this.setState((prevState) => {\n      if (prevState.selectedLangs.has(name)) {\n        prevState.selectedLangs.delete(name);\n      } else {\n        prevState.selectedLangs.add(name);\n      }\n      return { selectedLangs: prevState.selectedLangs };\n    });\n    wipeHash();\n  };\n\n  // if nothing is passed, remove highlight\n  setHighlighted = (name?: string) => this.setState({ highlighted: name });\n\n  render = () => (\n    <GlobalContext.Provider\n      value={{\n        ...this.state,\n        updateSearchTerm: this.updateSearchTerm,\n        toggleTrimmed: this.toggleTrimmed,\n        toggleMetricsAreExpanded: this.toggleMetricsAreExpanded,\n        emptyList: this.emptyList,\n        resetList: this.resetList,\n        changeMetric: this.changeMetric,\n        changeScale: this.changeScale,\n        changeWeight: this.changeWeight,\n        toggleSelected: this.toggleSelected,\n        setHighlighted: this.setHighlighted,\n      }}\n    >\n      {this.props.children}\n    </GlobalContext.Provider>\n  );\n\n  private constructList() {\n    const getRanks = (offset = 1) => {\n      const counts = objectEntries(entries)\n        .map(([name, stats]) => ({\n          name,\n          value: stats.slice(-offset)[0][this.state.metric],\n        }))\n        .sort((a, b) => b.value - a.value);\n\n      let currRank: number;\n      const ranks = counts.map(({ name, value }, i) => {\n        let rank: number;\n\n        // edge case for first element\n        // if theres a tie, dont increment the rank\n        if (i === 0) {\n          rank = 1;\n        } else if (counts[i - 1].value === value) {\n          rank = currRank;\n        } else {\n          rank = currRank + 1;\n        }\n        currRank = rank;\n\n        return {\n          name,\n          rank,\n        };\n      });\n\n      return ranks;\n    };\n\n    // Offset 1 vs offset 5 quarters is 1 year back.\n    const currentRanks = getRanks();\n    const oldRanks = getRanks(5);\n    const oldRanksMap: { [k: string]: number } = oldRanks.reduce(\n      (prev, curr) => ({ ...prev, [curr.name]: curr.rank }),\n      {}\n    );\n\n    const worstRank = Math.min(\n      oldRanks[oldRanks.length - 1].rank,\n      currentRanks[currentRanks.length - 1].rank\n    );\n\n    const langList = currentRanks.map((ele) => ({\n      ...ele,\n      color: colors[ele.name],\n      diff:\n        Math.min(oldRanksMap[ele.name], worstRank) -\n        Math.min(ele.rank, worstRank),\n    }));\n\n    this.setState({ langList });\n  }\n\n  private loadUrlParams() {\n    // do it only if theres any hash in uri\n    if (!window.location.hash) return;\n    rememberHash = true;\n\n    const params = new URLSearchParams(window.location.hash.slice(1));\n\n    // set the url's metric only if it exists\n    const metric = params.get(\"y\");\n    if (metric) {\n      this.changeMetric(metric as keyof Metrics);\n    }\n    const weightsText = params.get(\"weights\");\n    if (weightsText) {\n      const weights = Object.fromEntries(\n        new URLSearchParams(weightsText)\n      ) as CoreMetricTexts;\n      this.setState({ weights }, this.processChangedWeights);\n    }\n    const scale = params.get(\"yscale\");\n    if (scale) {\n      this.changeScale(scale as Scale);\n    }\n\n    // set the names if they exist\n    const names = new Set(params.get(\"names\")?.split(\",\"));\n    if (names.size !== 0) {\n      this.emptyList();\n      // the search has to be done because the url stores the lower case version but the state requires the original name\n      for (const lang of this.state.langList) {\n        if (names.has(lang.name.toLowerCase())) {\n          this.toggleSelected(lang.name);\n        }\n      }\n    }\n\n    // clean up the hash after any changes after done loading\n    setTimeout(() => (rememberHash = false), 0);\n\n    this.setState({ trimmed: true });\n  }\n\n  private processChangedWeights() {\n    putMean({ entries, sums, weights: parseWeights(this.state.weights) });\n    this.constructList();\n  }\n}\n\nlet rememberHash = false;\n\nfunction wipeHash() {\n  if (!rememberHash) {\n    window.history.replaceState(null, \"\", \" \");\n  }\n}\n","import { useGlobal } from \"context\";\nimport { parseWeights } from \"parsedData\";\nimport React, { useState } from \"react\";\nimport \"styles/Header.css\";\n\nconst Header = () => {\n  const global = useGlobal();\n  const [showMessage, setShowMessage] = useState(false);\n\n  const copyLink = () => {\n    const params = new URLSearchParams();\n    const names = [...global.selectedLangs].map((name) => name.toLowerCase());\n    params.append(\"y\", global.metric);\n    if (global.metric === \"mean\") {\n      const customWeights = new URLSearchParams();\n      Object.entries(parseWeights(global.weights)).forEach(([key, value]) => {\n        customWeights.append(key, String(value));\n      });\n      params.append(\"weights\", customWeights.toString());\n    }\n    if (global.scale !== \"linear\") {\n      params.append(\"yscale\", global.scale);\n    }\n    params.append(\"names\", names.join(\",\"));\n\n    const url = new URL(window.location.href);\n    url.hash = String(params);\n    window.location.hash = url.hash;\n\n    // using legacy way of copying because safari doesnt implement the new one\n    var textarea = document.createElement(\"textarea\");\n    textarea.textContent = String(url);\n    textarea.style.position = \"fixed\";\n    document.body.appendChild(textarea);\n    textarea.select();\n    document.execCommand(\"copy\");\n    document.body.removeChild(textarea);\n\n    setShowMessage(true);\n    setTimeout(() => setShowMessage(false), 1000);\n  };\n\n  return (\n    <div className=\"header\">\n      <div>\n        <a\n          href=\"https://github.com/tjpalmer/languish\"\n          className=\"github-corner\"\n          title=\"View source and project info\"\n        >\n          <svg\n            width=\"80\"\n            height=\"80\"\n            viewBox=\"0 0 250 250\"\n            fill=\"#fff\"\n            color=\"#333\"\n            style={{\n              position: \"absolute\",\n              top: 0,\n              border: 0,\n              left: 0,\n              transform: \"scale(-1, 1)\",\n            }}\n            aria-hidden=\"true\"\n          >\n            <path d=\"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z\"></path>\n            <path\n              d=\"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2\"\n              fill=\"currentColor\"\n              style={{ transformOrigin: \"130px 106px\" }}\n              className=\"octo-arm\"\n            ></path>\n            <path\n              d=\"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z\"\n              fill=\"currentColor\"\n              className=\"octo-body\"\n            ></path>\n          </svg>\n        </a>\n      </div>\n      <h1>\n        <a href=\".\">Languish</a>\n      </h1>\n      <h2>\n        <div title=\"Current data from public GitHub projects\">\n          Programming Language Trends\n        </div>\n        <div>\n          ... for more,{\" \"}\n          <a\n            href=\"https://www.youtube.com/channel/UCS4FAVeYW_IaZqAbqhlvxlA\"\n            title=\"Context Free - YouTube channel about programming languages\"\n          >\n            subscribe to Context Free\n          </a>\n        </div>\n      </h2>\n      <div className=\"spread\"></div>\n      {showMessage && <div>Copied!</div>}\n      <div className=\"linkBox\">\n        <a\n          className=\"icolink link\"\n          href=\".\"\n          onClick={(e) => {\n            e.preventDefault();\n            copyLink();\n          }}\n          title=\"Permalink selections\"\n        >\n          <span className=\"icon-link-2\"></span>\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n","import { clx } from \"helpers\";\nimport React, { memo } from \"react\";\nimport { translations } from \"parsedData\";\n\nconst customNames: { [key: string]: string } = {\n  raku: \"perl 6\",\n};\n\nconst customTopics: { [key: string]: string } = {\n  \"cap'n proto\": \"capn-proto\",\n  \"c++\": \"cpp\",\n  \"c#\": \"csharp\",\n  \"f#\": \"fsharp\",\n  \"f*\": \"fstar\",\n  \"graphviz (dot)\": \"graphviz-dot\",\n  \"objective-c++\": \"objective-cpp\",\n  \"perl 6\": \"perl6\",\n  \"q#\": \"qsharp\",\n  \"ren'py\": \"renpy\",\n  \"visual basic .net\": \"visual-basic-net\",\n};\n\nexport interface LangItemProps {\n  rank: number;\n  color: string;\n  name: string;\n  diff: number;\n  onClick: (name: string) => void;\n  onMouseOver: (name: string) => void;\n  onMouseOut: () => void;\n  selected?: boolean;\n}\n\nconst LangItem: React.FC<LangItemProps> = memo(\n  ({ diff, name, rank, onClick, onMouseOver, onMouseOut, selected, color }) => {\n    const lowerCaseName = name.toLowerCase();\n    const customName = customNames[lowerCaseName] || lowerCaseName;\n    const customTopic =\n      customTopics[customName] || customName.replace(/ /g, \"-\");\n    const translation = translations[name];\n    // TODO Disable link instead of inventing a tag.\n    const soTag = translation\n      ? translations[name].stackoverflow.split(\"|\")[0]\n      : name.toLowerCase();\n\n    return (\n      <tr\n        className=\"interactive\"\n        data-name={name}\n        onClick={() => onClick(name)}\n        onMouseOver={selected ? () => onMouseOver(name) : undefined}\n        onMouseOut={selected ? () => onMouseOut() : undefined}\n      >\n        <td\n          className={clx(\"marker\", selected && \"active\")}\n          style={selected ? { backgroundColor: color } : undefined}\n        >\n          {rank}\n        </td>\n        <td className=\"label\">\n          {name}\n          <div className=\"info\">\n            <a\n              className=\"icolink\"\n              target=\"__blank\"\n              href={`https://www.google.com/search?q=${encodeURIComponent(\n                lowerCaseName\n              )}%20language`}\n              title=\"Google Search\"\n            >\n              <span className=\"icon-google\"></span>\n            </a>\n            <a\n              className=\"icolink\"\n              href={`https://github.com/topics/${encodeURIComponent(\n                customTopic\n              )}?l=${encodeURIComponent(customName)}`}\n              title=\"GitHub Topic\"\n            >\n              <span className=\"icon-github\"></span>\n            </a>\n            <a\n              className=\"icolink\"\n              target=\"__blank\"\n              href={`https://github.com/trending/${encodeURIComponent(\n                customName\n              )}?since=daily`}\n              title=\"GitHub Trending\"\n            >\n              <span className=\"icon-trending-up\"></span>\n            </a>\n            <a\n              className=\"icolink\"\n              target=\"__blank\"\n              href={`https://stackoverflow.com/questions/tagged/${encodeURIComponent(\n                soTag\n              )}?tab=Newest`}\n              title=\"Stack Overflow\"\n            >\n              <span className=\"icon-stack-overflow\"></span>\n            </a>\n          </div>\n        </td>\n        <td className=\"change\" title=\"Change in rank vs 1 year earlier\">\n          {diff > 0 && \"+\"}\n          {diff !== 0 && diff}\n        </td>\n      </tr>\n    );\n  }\n);\n\nexport default LangItem;\n","import { useGlobal } from \"context\";\nimport { clx } from \"helpers\";\nimport React, { useMemo, useRef } from \"react\";\nimport LangItem from \"./LangItem\";\n\nconst LangList = () => {\n  const global = useGlobal();\n  const inputRef = useRef<HTMLInputElement | null>(null);\n\n  const langsToRender = useMemo(() => {\n    const lowerCaseSearchTerm = global.searchTerm.toLowerCase();\n\n    // if trimmed filter out the non-selected langs + those that do not match the query\n    if (global.trimmed) {\n      return global.langList.filter(\n        (lang) =>\n          global.selectedLangs.has(lang.name) &&\n          lang.name.toLowerCase().includes(lowerCaseSearchTerm)\n      );\n    }\n\n    // filter out those do not match the query\n    return global.langList.filter((lang) =>\n      lang.name.toLowerCase().includes(lowerCaseSearchTerm)\n    );\n  }, [\n    global.trimmed,\n    global.selectedLangs,\n    global.langList,\n    global.searchTerm,\n  ]);\n\n  return (\n    <div className=\"legend\">\n      <div className=\"list\">\n        <div className=\"listScroll\">\n          <div className=\"listBox\">\n            <table>\n              {langsToRender.map((lang) => (\n                <LangItem\n                  {...lang}\n                  key={lang.name}\n                  onClick={global.toggleSelected}\n                  onMouseOver={global.setHighlighted}\n                  onMouseOut={global.setHighlighted}\n                  selected={global.selectedLangs.has(lang.name)}\n                />\n              ))}\n            </table>\n          </div>\n        </div>\n      </div>\n      <div className=\"tools\">\n        <div\n          className=\"clear interactive\"\n          onClick={global.emptyList}\n          title=\"Clear all language selections\"\n        >\n          Empty\n        </div>\n        <div\n          className=\"reset interactive\"\n          onClick={global.resetList}\n          title=\"Reset to originally selected languages\"\n        >\n          Reset\n        </div>\n        <div\n          className={clx(\"trim interactive\", global.trimmed && \"checked\")}\n          onClick={global.toggleTrimmed}\n          title=\"Toggle showing selected vs all languages\"\n        >\n          Trim\n        </div>\n      </div>\n      <label className=\"query\">\n        <span\n          className={clx(\n            \"queryClear\",\n            global.searchTerm ? \"icon-close\" : \"icon-search\"\n          )}\n          onClick={() => global.updateSearchTerm(\"\")}\n        ></span>\n        <input\n          ref={inputRef}\n          title=\"Filter by name\"\n          value={global.searchTerm}\n          onChange={(e) => global.updateSearchTerm(e.target.value)}\n        />\n      </label>\n    </div>\n  );\n};\n\nexport default LangList;\n","import { useGlobal, Scale } from \"context\";\nimport { clx, objectEntries } from \"helpers\";\nimport { Metrics } from \"parsedData\";\nimport React from \"react\";\n\ntype MetricItem = {\n  info?: string;\n  label: string;\n};\n\nconst Metric = () => {\n  const global = useGlobal();\n\n  // map of available metrics to human readable strings\n  const items: { [k in keyof Metrics]: MetricItem } = {\n    mean: { label: \"Mean Score\" },\n    issues: { label: \"GH Issues\" },\n    pulls: {\n      label: \"GH Pull Requests\",\n      info: \"Might exclude by default because bots\",\n    },\n    stars: { label: \"GH Stars\" },\n    soQuestions: {\n      label: \"SO Questions\",\n      info: \"Excluded by default because incomplete\",\n    },\n  };\n\n  // map of available metrics to human readable strings\n  const scales: { [k in Scale]: string } = {\n    linear: \"Linear\",\n    log: \"Log\",\n  };\n\n  function renderWeight(key: keyof Metrics) {\n    if (key !== \"mean\") {\n      const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        global.changeWeight(key, event.target.value);\n      };\n      return (\n        <>\n          <label\n            className=\"weight\"\n            title={`${(items as any)[key].label} weight for mean`}\n          >\n            <input onChange={onChange} value={(global.weights as any)[key]} />\n          </label>\n          &nbsp;\n        </>\n      );\n    } else {\n      return <span></span>;\n    }\n  }\n\n  return (\n    <>\n      <div className=\"yAxis\">\n        <div\n          className=\"yLabel interactive\"\n          title=\"Change y axis options\"\n          onClick={global.toggleMetricsAreExpanded}\n        >\n          <span className=\"yLabelArrow\"></span>{\" \"}\n          <span className=\"yLabelText\">\n            {global.scale === \"log\" ? \"Log \" : \"\"}\n            {items[global.metric].label}\n          </span>{\" \"}\n          <span className=\"yLabelArrow\"></span>\n        </div>\n      </div>\n      <div className=\"yOptions\">\n        <div className=\"yOptionsBox\">\n          <h3>Metric</h3>\n          <ul className=\"yMetricsList\">\n            {objectEntries(items).map(([real, display]) => (\n              <li>\n                <span className=\"metricRow\">\n                  {renderWeight(real)}\n                  <span\n                    className={clx(\n                      \"interactive\",\n                      \"metric\",\n                      real,\n                      global.metric === real && \"active\"\n                    )}\n                    onClick={() => global.changeMetric(real)}\n                    title={display.info}\n                  >\n                    {display.label}\n                  </span>\n                </span>\n              </li>\n            ))}\n          </ul>\n          <h3>Scale</h3>\n          <ul className=\"yScaleList\">\n            {objectEntries(scales).map(([real, display]) => (\n              <li\n                onClick={() => global.changeScale(real)}\n                className={clx(\n                  \"interactive\",\n                  real,\n                  global.scale === real && \"active\"\n                )}\n              >\n                {display}\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Metric;\n","import { Chart, ChartColor, ChartDataSets } from \"chart.js\";\nimport { Scale, useGlobal } from \"context\";\nimport { trimTrailingFloat } from \"helpers\";\nimport { colors, dates, entries, Metrics } from \"parsedData\";\nimport React, { useEffect, useLayoutEffect, useRef } from \"react\";\n\nfunction makeDataset(name: string, metric: keyof Metrics): ChartDataSets {\n  const borderColor = colors[name];\n\n  return {\n    borderColor,\n    cubicInterpolationMode: \"monotone\",\n    data: entries[name].map((entry) => entry[metric]),\n    fill: false,\n    hoverBorderColor: borderColor,\n    hoverBorderWidth: 6,\n    pointHoverBackgroundColor: borderColor,\n    label: name,\n    pointBackgroundColor: borderColor,\n  };\n}\n\nfunction chartJsScale(scale: Scale) {\n  return scale === \"log\" ? \"logarithmic\" : \"linear\";\n}\n\nconst Plot = () => {\n  const global = useGlobal();\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\n  const chart = useRef<Chart | undefined>();\n\n  // create Chart object once after first render\n  useLayoutEffect(() => {\n    if (!canvasRef.current) return;\n\n    const context = canvasRef.current.getContext(\"2d\")!;\n    chart.current = new Chart(context, {\n      data: {\n        datasets: [],\n        labels: dates,\n      },\n      options: {\n        animation: {\n          duration: 300,\n        },\n        hover: {\n          animationDuration: 200,\n          mode: \"dataset\",\n        },\n        legend: {\n          display: false,\n        },\n        maintainAspectRatio: false,\n        responsive: true,\n        scales: {\n          xAxes: [\n            {\n              ticks: {\n                callback: (date: string) => {\n                  return date.includes(\"Q1\") ? date.replace(\"Q1\", \"\") : \"\";\n                },\n                fontColor: \"white\",\n              },\n              // type: 'linear',\n            },\n          ],\n          yAxes: [\n            {\n              // scaleLabel: {display: true, labelString: 'Stars'},\n              ticks: {\n                callback: (value: number) => `${trimTrailingFloat(value)}%`,\n                fontColor: \"white\",\n                suggestedMin: 0,\n              },\n            },\n          ],\n        },\n        tooltips: {\n          bodyFontSize: 18,\n          // I can't figure out how to remove the white border, but black here\n          // softens it some.\n          callbacks: {\n            label: (item, data) =>\n              `${data.datasets![item.datasetIndex!].label}: ` +\n              `${Number(item.value).toFixed(2)}%`,\n            labelColor: (item, chart) => {\n              let dataset = chart.data.datasets![item.datasetIndex!];\n              let color = dataset.borderColor as ChartColor;\n              return { borderColor: \"black\", backgroundColor: color };\n            },\n          },\n          // mode: 'x',  // Would need to highlight current and refine.\n          position: \"nearest\",\n          titleFontSize: 18,\n          titleFontStyle: \"normal\",\n        },\n      },\n      type: \"line\",\n    });\n  }, []);\n\n  // reset the data when metrics change\n  useEffect(() => {\n    if (chart.current?.data.datasets) {\n      chart.current.data.datasets = [];\n    }\n  }, [global.metric, global.weights]);\n\n  // react to changed in the global state\n  useEffect(\n    () => {\n      if (!chart.current?.data.datasets) return;\n      // set of currently rendered sets\n      const available = new Set<string>();\n\n      // filter out old data\n      chart.current.data.datasets = chart.current.data.datasets.filter((e) => {\n        available.add(e.label || \"\");\n        return global.selectedLangs.has(e.label || \"\");\n      });\n      // add missing data\n      for (const name of global.selectedLangs) {\n        if (!available.has(name)) {\n          chart.current.data.datasets.push(makeDataset(name, global.metric));\n        }\n      }\n\n      chart.current.update();\n    },\n    // rule is disabled because global.selectedLangs never changes shallowly\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      global.metric,\n      global.selectedLangs.size,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...global.selectedLangs,\n      global.weights,\n    ]\n  );\n\n  // react to changed in the global state\n  useEffect(() => {\n    chart.current!.options.scales!.yAxes![0].type = chartJsScale(global.scale);\n    chart.current!.update();\n  }, [global.scale]);\n\n  // update highlighted element\n  useEffect(() => {\n    if (!chart.current?.data.datasets) return;\n    for (const lang of chart.current.data.datasets) {\n      lang.borderWidth = lang.label === global.highlighted ? 9 : 3;\n    }\n    chart.current.update();\n  }, [global.highlighted]);\n\n  return (\n    <div className=\"plot\">\n      <div className=\"plotBox\">\n        <canvas ref={canvasRef}></canvas>\n      </div>\n      <div className=\"xAxis\">\n        <div className=\"xLabel interactive\"></div>\n      </div>\n    </div>\n  );\n};\n\nexport default Plot;\n","import Header from \"components/Header\";\nimport LangList from \"components/LangList\";\nimport Metric from \"components/Metric\";\nimport Plot from \"components/Plot\";\nimport { useGlobal } from \"context\";\nimport { clx } from \"helpers\";\nimport React from \"react\";\n\nconst App = () => {\n  const global = useGlobal();\n\n  return (\n    <div className=\"content\">\n      <Header />\n      <div\n        className={clx(\n          \"display\",\n          global.metricsAreExpanded && \"yOptionsExpanded\"\n        )}\n      >\n        <Metric />\n        <Plot />\n        <LangList />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { GlobalProvider } from \"context\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"styles/index.css\";\nimport App from \"./components/App\";\n\n// Polyfill from MDN.\nif (typeof window.queueMicrotask !== \"function\") {\n  window.queueMicrotask = function (callback) {\n    Promise.resolve()\n      .then(callback)\n      .catch((e) =>\n        setTimeout(() => {\n          throw e;\n        })\n      );\n  };\n}\n\nReactDOM.render(\n  <GlobalProvider>\n    <App />\n  </GlobalProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}